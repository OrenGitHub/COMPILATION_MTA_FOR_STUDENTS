===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [stmt ::= (*) WHILE LPAREN exp RPAREN LBRACE stmtList RBRACE , {EOF IF WHILE ID }]
  [var ::= (*) var LBRACK exp RBRACK , {DOT LBRACK ASSIGN }]
  [stmtList ::= (*) stmt , {EOF }]
  [stmt ::= (*) IF LPAREN exp RPAREN LBRACE stmtList RBRACE , {EOF IF WHILE ID }]
  [var ::= (*) var DOT ID , {DOT LBRACK ASSIGN }]
  [stmtList ::= (*) stmt stmtList , {EOF }]
  [stmt ::= (*) var ASSIGN exp SEMICOLON , {EOF IF WHILE ID }]
  [var ::= (*) ID , {DOT LBRACK ASSIGN }]
  [$START ::= (*) stmtList EOF , {EOF }]
}
transition on IF to state [6]
transition on WHILE to state [5]
transition on stmtList to state [4]
transition on stmt to state [3]
transition on var to state [2]
transition on ID to state [1]

-------------------
lalr_state [1]: {
  [var ::= ID (*) , {DOT PLUS MINUS TIMES RPAREN LBRACK RBRACK SEMICOLON ASSIGN }]
}

-------------------
lalr_state [2]: {
  [var ::= var (*) LBRACK exp RBRACK , {DOT LBRACK ASSIGN }]
  [var ::= var (*) DOT ID , {DOT LBRACK ASSIGN }]
  [stmt ::= var (*) ASSIGN exp SEMICOLON , {EOF IF WHILE RBRACE ID }]
}
transition on DOT to state [24]
transition on ASSIGN to state [36]
transition on LBRACK to state [23]

-------------------
lalr_state [3]: {
  [stmt ::= (*) WHILE LPAREN exp RPAREN LBRACE stmtList RBRACE , {EOF IF WHILE RBRACE ID }]
  [stmtList ::= stmt (*) , {EOF RBRACE }]
  [var ::= (*) var LBRACK exp RBRACK , {DOT LBRACK ASSIGN }]
  [stmtList ::= (*) stmt , {EOF RBRACE }]
  [stmt ::= (*) IF LPAREN exp RPAREN LBRACE stmtList RBRACE , {EOF IF WHILE RBRACE ID }]
  [var ::= (*) var DOT ID , {DOT LBRACK ASSIGN }]
  [stmtList ::= stmt (*) stmtList , {EOF RBRACE }]
  [stmtList ::= (*) stmt stmtList , {EOF RBRACE }]
  [stmt ::= (*) var ASSIGN exp SEMICOLON , {EOF IF WHILE RBRACE ID }]
  [var ::= (*) ID , {DOT LBRACK ASSIGN }]
}
transition on IF to state [6]
transition on WHILE to state [5]
transition on stmtList to state [35]
transition on stmt to state [3]
transition on var to state [2]
transition on ID to state [1]

-------------------
lalr_state [4]: {
  [$START ::= stmtList (*) EOF , {EOF }]
}
transition on EOF to state [34]

-------------------
lalr_state [5]: {
  [stmt ::= WHILE (*) LPAREN exp RPAREN LBRACE stmtList RBRACE , {EOF IF WHILE RBRACE ID }]
}
transition on LPAREN to state [28]

-------------------
lalr_state [6]: {
  [stmt ::= IF (*) LPAREN exp RPAREN LBRACE stmtList RBRACE , {EOF IF WHILE RBRACE ID }]
}
transition on LPAREN to state [7]

-------------------
lalr_state [7]: {
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN }]
  [exp ::= (*) MINUS INT , {PLUS MINUS TIMES RPAREN }]
  [var ::= (*) var LBRACK exp RBRACK , {DOT PLUS MINUS TIMES RPAREN LBRACK }]
  [stmt ::= IF LPAREN (*) exp RPAREN LBRACE stmtList RBRACE , {EOF IF WHILE RBRACE ID }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN }]
  [exp ::= (*) var , {PLUS MINUS TIMES RPAREN }]
  [var ::= (*) var DOT ID , {DOT PLUS MINUS TIMES RPAREN LBRACK }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN }]
  [exp ::= (*) INT , {PLUS MINUS TIMES RPAREN }]
  [var ::= (*) ID , {DOT PLUS MINUS TIMES RPAREN LBRACK }]
}
transition on INT to state [11]
transition on exp to state [10]
transition on MINUS to state [9]
transition on var to state [8]
transition on ID to state [1]

-------------------
lalr_state [8]: {
  [var ::= var (*) LBRACK exp RBRACK , {DOT PLUS MINUS TIMES RPAREN LBRACK RBRACK SEMICOLON }]
  [exp ::= var (*) , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [var ::= var (*) DOT ID , {DOT PLUS MINUS TIMES RPAREN LBRACK RBRACK SEMICOLON }]
}
transition on DOT to state [24]
transition on LBRACK to state [23]

-------------------
lalr_state [9]: {
  [exp ::= MINUS (*) INT , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
}
transition on INT to state [22]

-------------------
lalr_state [10]: {
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN }]
  [stmt ::= IF LPAREN exp (*) RPAREN LBRACE stmtList RBRACE , {EOF IF WHILE RBRACE ID }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN }]
}
transition on TIMES to state [15]
transition on MINUS to state [14]
transition on PLUS to state [13]
transition on RPAREN to state [12]

-------------------
lalr_state [11]: {
  [exp ::= INT (*) , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
}

-------------------
lalr_state [12]: {
  [stmt ::= IF LPAREN exp RPAREN (*) LBRACE stmtList RBRACE , {EOF IF WHILE RBRACE ID }]
}
transition on LBRACE to state [19]

-------------------
lalr_state [13]: {
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [exp ::= (*) MINUS INT , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [var ::= (*) var LBRACK exp RBRACK , {DOT PLUS MINUS TIMES RPAREN LBRACK RBRACK SEMICOLON }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [exp ::= (*) var , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [var ::= (*) var DOT ID , {DOT PLUS MINUS TIMES RPAREN LBRACK RBRACK SEMICOLON }]
  [exp ::= exp PLUS (*) exp , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [exp ::= (*) INT , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [var ::= (*) ID , {DOT PLUS MINUS TIMES RPAREN LBRACK RBRACK SEMICOLON }]
}
transition on INT to state [11]
transition on exp to state [18]
transition on MINUS to state [9]
transition on var to state [8]
transition on ID to state [1]

-------------------
lalr_state [14]: {
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [exp ::= (*) MINUS INT , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [var ::= (*) var LBRACK exp RBRACK , {DOT PLUS MINUS TIMES RPAREN LBRACK RBRACK SEMICOLON }]
  [exp ::= exp MINUS (*) exp , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [exp ::= (*) var , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [var ::= (*) var DOT ID , {DOT PLUS MINUS TIMES RPAREN LBRACK RBRACK SEMICOLON }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [exp ::= (*) INT , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [var ::= (*) ID , {DOT PLUS MINUS TIMES RPAREN LBRACK RBRACK SEMICOLON }]
}
transition on INT to state [11]
transition on exp to state [17]
transition on MINUS to state [9]
transition on var to state [8]
transition on ID to state [1]

-------------------
lalr_state [15]: {
  [exp ::= exp TIMES (*) exp , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [exp ::= (*) MINUS INT , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [var ::= (*) var LBRACK exp RBRACK , {DOT PLUS MINUS TIMES RPAREN LBRACK RBRACK SEMICOLON }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [exp ::= (*) var , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [var ::= (*) var DOT ID , {DOT PLUS MINUS TIMES RPAREN LBRACK RBRACK SEMICOLON }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [exp ::= (*) INT , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [var ::= (*) ID , {DOT PLUS MINUS TIMES RPAREN LBRACK RBRACK SEMICOLON }]
}
transition on INT to state [11]
transition on exp to state [16]
transition on MINUS to state [9]
transition on var to state [8]
transition on ID to state [1]

-------------------
lalr_state [16]: {
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [exp ::= exp TIMES exp (*) , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
}
transition on TIMES to state [15]
transition on MINUS to state [14]
transition on PLUS to state [13]

-------------------
lalr_state [17]: {
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [exp ::= exp MINUS exp (*) , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
}
transition on TIMES to state [15]
transition on MINUS to state [14]
transition on PLUS to state [13]

-------------------
lalr_state [18]: {
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [exp ::= exp PLUS exp (*) , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
}
transition on TIMES to state [15]
transition on MINUS to state [14]
transition on PLUS to state [13]

-------------------
lalr_state [19]: {
  [stmt ::= (*) WHILE LPAREN exp RPAREN LBRACE stmtList RBRACE , {IF WHILE RBRACE ID }]
  [var ::= (*) var LBRACK exp RBRACK , {DOT LBRACK ASSIGN }]
  [stmtList ::= (*) stmt , {RBRACE }]
  [stmt ::= IF LPAREN exp RPAREN LBRACE (*) stmtList RBRACE , {EOF IF WHILE RBRACE ID }]
  [stmt ::= (*) IF LPAREN exp RPAREN LBRACE stmtList RBRACE , {IF WHILE RBRACE ID }]
  [var ::= (*) var DOT ID , {DOT LBRACK ASSIGN }]
  [stmtList ::= (*) stmt stmtList , {RBRACE }]
  [stmt ::= (*) var ASSIGN exp SEMICOLON , {IF WHILE RBRACE ID }]
  [var ::= (*) ID , {DOT LBRACK ASSIGN }]
}
transition on IF to state [6]
transition on WHILE to state [5]
transition on stmtList to state [20]
transition on stmt to state [3]
transition on var to state [2]
transition on ID to state [1]

-------------------
lalr_state [20]: {
  [stmt ::= IF LPAREN exp RPAREN LBRACE stmtList (*) RBRACE , {EOF IF WHILE RBRACE ID }]
}
transition on RBRACE to state [21]

-------------------
lalr_state [21]: {
  [stmt ::= IF LPAREN exp RPAREN LBRACE stmtList RBRACE (*) , {EOF IF WHILE RBRACE ID }]
}

-------------------
lalr_state [22]: {
  [exp ::= MINUS INT (*) , {PLUS MINUS TIMES RPAREN RBRACK SEMICOLON }]
}

-------------------
lalr_state [23]: {
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RBRACK }]
  [var ::= var LBRACK (*) exp RBRACK , {DOT PLUS MINUS TIMES RPAREN LBRACK RBRACK SEMICOLON ASSIGN }]
  [exp ::= (*) MINUS INT , {PLUS MINUS TIMES RBRACK }]
  [var ::= (*) var LBRACK exp RBRACK , {DOT PLUS MINUS TIMES LBRACK RBRACK }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RBRACK }]
  [exp ::= (*) var , {PLUS MINUS TIMES RBRACK }]
  [var ::= (*) var DOT ID , {DOT PLUS MINUS TIMES LBRACK RBRACK }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RBRACK }]
  [exp ::= (*) INT , {PLUS MINUS TIMES RBRACK }]
  [var ::= (*) ID , {DOT PLUS MINUS TIMES LBRACK RBRACK }]
}
transition on INT to state [11]
transition on exp to state [26]
transition on MINUS to state [9]
transition on var to state [8]
transition on ID to state [1]

-------------------
lalr_state [24]: {
  [var ::= var DOT (*) ID , {DOT PLUS MINUS TIMES RPAREN LBRACK RBRACK SEMICOLON ASSIGN }]
}
transition on ID to state [25]

-------------------
lalr_state [25]: {
  [var ::= var DOT ID (*) , {DOT PLUS MINUS TIMES RPAREN LBRACK RBRACK SEMICOLON ASSIGN }]
}

-------------------
lalr_state [26]: {
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RBRACK }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RBRACK }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RBRACK }]
  [var ::= var LBRACK exp (*) RBRACK , {DOT PLUS MINUS TIMES RPAREN LBRACK RBRACK SEMICOLON ASSIGN }]
}
transition on TIMES to state [15]
transition on MINUS to state [14]
transition on PLUS to state [13]
transition on RBRACK to state [27]

-------------------
lalr_state [27]: {
  [var ::= var LBRACK exp RBRACK (*) , {DOT PLUS MINUS TIMES RPAREN LBRACK RBRACK SEMICOLON ASSIGN }]
}

-------------------
lalr_state [28]: {
  [stmt ::= WHILE LPAREN (*) exp RPAREN LBRACE stmtList RBRACE , {EOF IF WHILE RBRACE ID }]
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES RPAREN }]
  [exp ::= (*) MINUS INT , {PLUS MINUS TIMES RPAREN }]
  [var ::= (*) var LBRACK exp RBRACK , {DOT PLUS MINUS TIMES RPAREN LBRACK }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES RPAREN }]
  [exp ::= (*) var , {PLUS MINUS TIMES RPAREN }]
  [var ::= (*) var DOT ID , {DOT PLUS MINUS TIMES RPAREN LBRACK }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES RPAREN }]
  [exp ::= (*) INT , {PLUS MINUS TIMES RPAREN }]
  [var ::= (*) ID , {DOT PLUS MINUS TIMES RPAREN LBRACK }]
}
transition on INT to state [11]
transition on exp to state [29]
transition on MINUS to state [9]
transition on var to state [8]
transition on ID to state [1]

-------------------
lalr_state [29]: {
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES RPAREN }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES RPAREN }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES RPAREN }]
  [stmt ::= WHILE LPAREN exp (*) RPAREN LBRACE stmtList RBRACE , {EOF IF WHILE RBRACE ID }]
}
transition on TIMES to state [15]
transition on MINUS to state [14]
transition on PLUS to state [13]
transition on RPAREN to state [30]

-------------------
lalr_state [30]: {
  [stmt ::= WHILE LPAREN exp RPAREN (*) LBRACE stmtList RBRACE , {EOF IF WHILE RBRACE ID }]
}
transition on LBRACE to state [31]

-------------------
lalr_state [31]: {
  [stmt ::= (*) WHILE LPAREN exp RPAREN LBRACE stmtList RBRACE , {IF WHILE RBRACE ID }]
  [var ::= (*) var LBRACK exp RBRACK , {DOT LBRACK ASSIGN }]
  [stmtList ::= (*) stmt , {RBRACE }]
  [stmt ::= (*) IF LPAREN exp RPAREN LBRACE stmtList RBRACE , {IF WHILE RBRACE ID }]
  [var ::= (*) var DOT ID , {DOT LBRACK ASSIGN }]
  [stmtList ::= (*) stmt stmtList , {RBRACE }]
  [stmt ::= (*) var ASSIGN exp SEMICOLON , {IF WHILE RBRACE ID }]
  [var ::= (*) ID , {DOT LBRACK ASSIGN }]
  [stmt ::= WHILE LPAREN exp RPAREN LBRACE (*) stmtList RBRACE , {EOF IF WHILE RBRACE ID }]
}
transition on IF to state [6]
transition on WHILE to state [5]
transition on stmtList to state [32]
transition on stmt to state [3]
transition on var to state [2]
transition on ID to state [1]

-------------------
lalr_state [32]: {
  [stmt ::= WHILE LPAREN exp RPAREN LBRACE stmtList (*) RBRACE , {EOF IF WHILE RBRACE ID }]
}
transition on RBRACE to state [33]

-------------------
lalr_state [33]: {
  [stmt ::= WHILE LPAREN exp RPAREN LBRACE stmtList RBRACE (*) , {EOF IF WHILE RBRACE ID }]
}

-------------------
lalr_state [34]: {
  [$START ::= stmtList EOF (*) , {EOF }]
}

-------------------
lalr_state [35]: {
  [stmtList ::= stmt stmtList (*) , {EOF RBRACE }]
}

-------------------
lalr_state [36]: {
  [exp ::= (*) exp TIMES exp , {PLUS MINUS TIMES SEMICOLON }]
  [exp ::= (*) MINUS INT , {PLUS MINUS TIMES SEMICOLON }]
  [var ::= (*) var LBRACK exp RBRACK , {DOT PLUS MINUS TIMES LBRACK SEMICOLON }]
  [exp ::= (*) exp MINUS exp , {PLUS MINUS TIMES SEMICOLON }]
  [exp ::= (*) var , {PLUS MINUS TIMES SEMICOLON }]
  [var ::= (*) var DOT ID , {DOT PLUS MINUS TIMES LBRACK SEMICOLON }]
  [stmt ::= var ASSIGN (*) exp SEMICOLON , {EOF IF WHILE RBRACE ID }]
  [exp ::= (*) exp PLUS exp , {PLUS MINUS TIMES SEMICOLON }]
  [exp ::= (*) INT , {PLUS MINUS TIMES SEMICOLON }]
  [var ::= (*) ID , {DOT PLUS MINUS TIMES LBRACK SEMICOLON }]
}
transition on INT to state [11]
transition on exp to state [37]
transition on MINUS to state [9]
transition on var to state [8]
transition on ID to state [1]

-------------------
lalr_state [37]: {
  [exp ::= exp (*) MINUS exp , {PLUS MINUS TIMES SEMICOLON }]
  [exp ::= exp (*) PLUS exp , {PLUS MINUS TIMES SEMICOLON }]
  [stmt ::= var ASSIGN exp (*) SEMICOLON , {EOF IF WHILE RBRACE ID }]
  [exp ::= exp (*) TIMES exp , {PLUS MINUS TIMES SEMICOLON }]
}
transition on TIMES to state [15]
transition on MINUS to state [14]
transition on PLUS to state [13]
transition on SEMICOLON to state [38]

-------------------
lalr_state [38]: {
  [stmt ::= var ASSIGN exp SEMICOLON (*) , {EOF IF WHILE RBRACE ID }]
}

-------------------
------- CUP v0.11b 20160615 (GIT 4ac7450) Parser Generation Summary -------
  0 errors and 0 warnings
  20 terminals, 4 non-terminals, and 15 productions declared, 
  producing 39 unique parse states.
  2 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "Parser.java", and "TokenNames.java".
---------------------------------------------------- (CUP v0.11b 20160615 (GIT 4ac7450))
